$PP_OFF



validationResultboxHeadline=Program Validation Result
validationResultboxSuccessMessage=	<b>Program is valid</b> <br /> \
									<br /> \
									<i>Please note: This is only a basic validation. Full validation is done when performing the compile command.</i>



helloWorld = hello, world
goodbyeWorld = goodbye, world
exceptionText = Very bad exception happened: 

dataServletUrl = backend/data

mainOpenxmlHeadline = upload you pact program xml
mainOpenxmlText = File hochladen:
mainOpenxmlButton = Upload
mainOpenxmlInfo = "File loaded"




pactSource = /** KLAPPT SUPER! \n \
 * Converts a input line, assuming to contain a string, into a record that\n  \
 * has a single field, which is a {@link PactString}, containing that line.\n  \
 */\n  \
public class SourceLineInFormat extends DelimitedInputFormat {\n \
	private final PactString lineStr = new PactString();\n  \
\n  \
		@Override\n  \
		public boolean readRecord(PactRecord record, byte[] line, int numBytes) {\n \
		lineStr.setValueAscii(line, 0, numBytes);\n  \
		record.setField(0, lineStr);\n  \
		return true;\n  \
	}\n  \
}




pactSink = /**\n \
 * Writes <tt>PactRecord</tt> containing an string (letter) and an integer\n \
 * (count) to a file. The output format is: [letter] [count]\n \
 */\n \
public class SinkOutFormat extends FileOutputFormat {\n \
	private final StringBuilder outBuffer = new StringBuilder();\n \
\n \
	@Override\n \
	public void writeRecord(PactRecord record) throws IOException {\n \
		outBuffer.setLength(0);\n \
		outBuffer.append("'" + record.getField(0, PactString.class).toString() + "'");\n \
		outBuffer.append(' ');\n \
		outBuffer.append(record.getField(1, PactInteger.class).getValue());\n \
		outBuffer.append('\\n');\n \
		\n \
		byte[] bytes = outBuffer.toString().getBytes();\n \
		this.stream.write(bytes);\n \
	}\n \
}





pactMap = /**\n \
* Map Stub for Letter Count Example\n \
* Package definition and eu.stratosphere.pact.common import will be added automatically\n \
*/\n \
public class MapName2 extends MapStub {\n \
    private final PactRecord outputRecord = new PactRecord();\n \
    private PactString pactString = new PactString();\n \
    private PactInteger pactInteger = new PactInteger(1);\n \
    \n \
    @Override\n \
    public void map(PactRecord record, Collector collector) {\n \
        // get the first field (as type PactString) from the record\n \
        PactString line = record.getField(0, PactString.class);\n \
        \n \
        if (line != null) {\n \
            replaceNonWordChars(line, ' ');\n \
	   		toLowerCase(line);\n \
            \n \
            StringTokenizer lineTokens = new StringTokenizer(line.getValue());\n \
            while (lineTokens.hasMoreTokens()) {\n \
                pactString.setValue(lineTokens.nextToken());\n \
                outputRecord.setField(0, pactString);\n \
                outputRecord.setField(1, pactInteger);\n \
                collector.collect(outputRecord);\n \
            }\n \
        }\n \
    }\n \
    \n \
    \n \
    // public class AsciiUtils {\n \
    public static void toLowerCase(PactString string){\n \
        final char[] chars = string.getCharArray();\n \
        final int len = string.length();\n \
        \n \
        for (int i = 0; i < len; i++) {\n \
            chars[i] = Character.toLowerCase(chars[i]);\n \
        }\n \
    }\n \
    public static void replaceNonWordChars(PactString string, char replacement) {\n \
        final char[] chars = string.getCharArray();\n \
	final int len = string.length();\n \
        \n \
        for (int i = 0; i < len; i++) {\n \
            final char c = chars[i];\n \
            if (!(Character.isLetter(c) || Character.isDigit(c) || c == '_')) {\n \
                chars[i] = replacement;\n \
            }\n \
        }\n \
    }\n \
}



pactReduce = /**\n \
 * Reduce Stub for Letter Count Example\n \
 * Package definition and eu.stratosphere.pact.common.*, java.util.* import will be added automatically\n \
 *\n \
 * The counts are assumed to be at position <code>1</code> in the record. The other fields are not modified.\n \
 */ \n \
@Combinable\n \
public class ReduceDefaultStub extends ReduceStub {\n \
	private PactInteger pactIntegerTemp = new PactInteger();\n \
\n \
	@Override\n \
	public void reduce(Iterator<PactRecord> records, Collector out) throws Exception {\n \
		PactRecord record = null;\n \
		int sum = 0;\n \
		while (records.hasNext()) {\n \
			record = records.next();\n \
			pactIntegerTemp = record.getField(1, PactInteger.class);\n \
			sum += pactIntegerTemp.getValue();\n \
		}\n \
\n \
		pactIntegerTemp.setValue(sum);\n \
		record.setField(1, pactIntegerTemp);\n \
		out.collect(record);\n \
	}\n \
\n \
	@Override\n \
	public void combine(Iterator<PactRecord> records, Collector out) throws Exception {\n \
		// the logic is the same as in the reduce function, so simply call\n \
		// the reduce method\n \
		this.reduce(records, out);\n \
	}\n \
}